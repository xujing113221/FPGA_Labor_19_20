// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/24/2019 19:34:28"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    adder_demo
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module adder_demo_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] op_a;
reg [3:0] op_b;
// wires                                               
wire [6:0] hex0_n;
wire [6:0] hex1_n;
wire [6:0] hex2_n;

// assign statements (if any)                          
adder_demo i1 (
// port map - connection between master ports and signals/registers   
	.hex0_n(hex0_n),
	.hex1_n(hex1_n),
	.hex2_n(hex2_n),
	.op_a(op_a),
	.op_b(op_b)
);
initial 
begin 
#1000000 $finish;
end 
// op_a[ 3 ]
initial
begin
	op_a[3] = 1'b0;
end 
// op_a[ 2 ]
initial
begin
	op_a[2] = 1'b0;
end 
// op_a[ 1 ]
initial
begin
	op_a[1] = 1'b0;
end 
// op_a[ 0 ]
initial
begin
	op_a[0] = 1'b0;
end 
// op_b[ 3 ]
initial
begin
	op_b[3] = 1'b0;
end 
// op_b[ 2 ]
initial
begin
	op_b[2] = 1'b0;
end 
// op_b[ 1 ]
initial
begin
	op_b[1] = 1'b0;
end 
// op_b[ 0 ]
initial
begin
	op_b[0] = 1'b0;
end 
initial 
begin 
#1000000 $stop;
end 
endmodule

